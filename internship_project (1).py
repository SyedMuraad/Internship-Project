# -*- coding: utf-8 -*-
"""Internship Project

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16zpuQx__bMpTUWLTlsv9aUyxP12UfLmn
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings("ignore")

from google.colab import files
uploaded = files.upload()

df = pd.read_csv('Order.tsv',sep='\t',header=0)
df.head()

from google.colab import files
uploaded = files.upload()

df1 = pd.read_json('Order_breakdown.json')
df1.head()

df.columns

df1.shape

df.shape

MD = pd.merge(df,df1 ,how = 'inner' )
#MD = MART DATA

MD.head()

"""# EDA"""

MD.shape

MD.columns

MD['Customer Name'].value_counts()

MD['Country'].value_counts()

MD['State'].value_counts()

MD['Product Name'].value_counts()

MD['Region'].value_counts()

sns.displot(x=MD['Region'])
plt.show()

"""# CONCLUSION
Central region has the highest no.of records while south has the least.
"""

sns.lineplot(x=MD['Sales'],y=MD['Profit'])
plt.show()

sns.violinplot(x=MD['Profit'],y=MD['Country'])
plt.show()

MD.isnull().sum()

"""# There are no null values in the dataset"""

MD.describe()

MD.columns

data= (MD['Discount'],MD['Actual Discount'])
print(data)

sns.scatterplot(x=MD['Discount'],y=MD['Actual Discount'],color='red')
plt.show()

MD.head()

encoder = LabelEncoder()

MD['Sub-Category'] = encoder.fit_transform(MD['Sub-Category'])
MD['Customer Name'] = encoder.fit_transform(MD['Customer Name'])
MD['Product Name'] = encoder.fit_transform(MD['Product Name'])
MD['Category'] = encoder.fit_transform(MD['Category'])
MD['Region'] = encoder.fit_transform(MD['Region'])
MD['Country'] = encoder.fit_transform(MD['Country'])
MD['Discount'] = encoder.fit_transform(MD['Discount'])
MD['Actual Discount'] = encoder.fit_transform(MD['Actual Discount'])
MD['City'] = encoder.fit_transform(MD['City'])
MD['Segment'] = encoder.fit_transform(MD['Segment'])
MD['Ship Date'] = encoder.fit_transform(MD['Ship Date'])
MD['Ship Mode'] = encoder.fit_transform(MD['Ship Mode'])
MD['State'] = encoder.fit_transform(MD['State'])
MD['Order ID'] = encoder.fit_transform(MD['Order ID'])
MD['Order Date'] = encoder.fit_transform(MD['Order Date'])

MD1 = MD.head()

MD1



MD.columns

X = MD.drop(columns = 'Sub-Category',axis=1)
Y = MD['Sub-Category']
print(X)
print(Y)



"""# PREPARING ML MODEL"""

from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

"""# Model training"""

regressor = XGBRegressor()

regressor.fit(X_train,Y_train)

"""# Evaluvating the model

"""

training_data_prediction = regressor.predict(X_train)

r2_train = metrics.r2_score(Y_train,training_data_prediction)

print('R Squared value =' ,r2_train)

test_data_prediction = regressor.predict(X_test)

r2_test = metrics.r2_score(Y_test,test_data_prediction)

print('R Squared value =',r2_test)

import pickle
with open('model_pickle','wb') as f:
     pickle.dump(model,f)